
# JPRT rule to build this workspace

JPRT_ARCHIVE_BUNDLE=$(ABS_OUTPUTDIR)/$(JPRT_BUILD_FLAVOR)-bundle.zip

ifeq ($(OSNAME),windows)
  ZIPFLAGS=-q
else
  # store symbolic links as the link
  ZIPFLAGS=-q -y
endif

jprt_build_productEmb:
	$(MAKE) JAVASE_EMBEDDED=true MINIMIZE_RAM_USAGE=true jprt_build_product

jprt_build_debugEmb:
	$(MAKE) JAVASE_EMBEDDED=true MINIMIZE_RAM_USAGE=true jprt_build_debug

jprt_build_fastdebugEmb:
	$(MAKE) JAVASE_EMBEDDED=true MINIMIZE_RAM_USAGE=true jprt_build_fastdebug

jprt_build_productOpen:
	$(MAKE) OPENJDK=true jprt_build_product

jprt_build_debugOpen:
	$(MAKE) OPENJDK=true jprt_build_debug

jprt_build_fastdebugOpen:
	$(MAKE) OPENJDK=true jprt_build_fastdebug

jprt_build_product: all_product copy_product_jdk export_product_jdk
	( $(CD) $(JDK_IMAGE_DIR) && \
	  $(ZIPEXE) $(ZIPFLAGS) -r $(JPRT_ARCHIVE_BUNDLE) . )

jprt_build_fastdebug: all_fastdebug copy_fastdebug_jdk export_fastdebug_jdk
	( $(CD) $(JDK_IMAGE_DIR)/fastdebug && \
	  $(ZIPEXE) $(ZIPFLAGS) -r $(JPRT_ARCHIVE_BUNDLE) . )

jprt_build_debug: all_debug copy_debug_jdk export_debug_jdk
	( $(CD) $(JDK_IMAGE_DIR)/debug && \
	  $(ZIPEXE) $(ZIPFLAGS) -r $(JPRT_ARCHIVE_BUNDLE) . )

.PHONY: jprt_build_product jprt_build_fastdebug jprt_build_debug

