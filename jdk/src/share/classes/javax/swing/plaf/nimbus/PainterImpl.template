package ${PACKAGE};

import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import javax.swing.*;
import javax.swing.Painter;


final class ${PAINTER_NAME} extends AbstractRegionPainter {
    //package private integers representing the available states that
    //this painter will paint. These are used when creating a new instance
    //of ${PAINTER_NAME} to determine which region/state is being painted
    //by that instance.
${STATIC_DECL}

    private int state; //refers to one of the static final ints above
    private PaintContext ctx;

    //the following 4 variables are reused during the painting code of the layers
    private Path2D path = new Path2D.Float();
    private Rectangle2D rect = new Rectangle2D.Float(0, 0, 0, 0);
    private RoundRectangle2D roundRect = new RoundRectangle2D.Float(0, 0, 0, 0, 0, 0);
    private Ellipse2D ellipse = new Ellipse2D.Float(0, 0, 0, 0);

    //All Colors used for painting are stored here. Ideally, only those colors being used
    //by a particular instance of ${PAINTER_NAME} would be created. For the moment at least,
    //however, all are created for each instance.
${COLORS_DECL}

    //Array of current component colors, updated in each paint call
    private Object[] componentColors;

    public ${PAINTER_NAME}(PaintContext ctx, int state) {
        super();
        this.state = state;
        this.ctx = ctx;
    }

    @Override
    protected void doPaint(Graphics2D g, JComponent c, int width, int height, Object[] extendedCacheKeys) {
        //populate componentColors array with colors calculated in getExtendedCacheKeys call
        componentColors = extendedCacheKeys;
        //generate this entire method. Each state/bg/fg/border combo that has
        //been painted gets its own KEY and paint method.
        switch(state) {
${DO_PAINT_SWITCH_BODY}
        }
    }
        
${GET_EXTENDED_CACHE_KEYS}

    @Override
    protected final PaintContext getPaintContext() {
        return ctx;
    }

${PAINTING_DECL}

${SHAPES_DECL}

${GRADIENTS_DECL}
}
